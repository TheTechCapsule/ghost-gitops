apiVersion: batch/v1
kind: CronJob
metadata:
  name: ghost-backup-verify
  labels:
    app: ghost-backup
spec:
  schedule: "25 3 * * *"   # daily 03:25
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: ghost-backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: verify
            image: busybox:1.36
            imagePullPolicy: IfNotPresent
            env:
            - name: BACKUP_ROOT
              value: /backups
            command: ["sh","-c"]
            args:
            - |
              set -euo pipefail
              echo "[verify] starting at $(date)"

              # ---- pick latest *valid, non-tiny* DB dump ----
              DB_FILE=""
              for f in $(ls -1t "$BACKUP_ROOT"/db*.sql.gz "$BACKUP_ROOT"/*.sql.gz 2>/dev/null || true); do
                [ -s "$f" ] || continue                            # non-empty
                if ! gzip -t "$f" 2>/dev/null; then continue; fi   # valid gzip
                bytes=$(wc -c < "$f" | tr -d '[:space:]')
                [ "${bytes:-0}" -ge 2048 ] || continue             # skip tiny (<2KB)
                DB_FILE="$f"; break
              done
              if [ -z "${DB_FILE:-}" ]; then
                echo "no valid DB dumps found"; exit 1
              fi
              echo "checking DB: $DB_FILE"

              # prove SQL has content (DDL/DML)
              TMP_SQL=$(mktemp)
              if ! gzip -cd "$DB_FILE" > "$TMP_SQL"; then
                echo "failed to decompress DB dump"; rm -f "$TMP_SQL"; exit 1
              fi
              if ! busybox grep -aEq '^[[:space:]]*(CREATE TABLE|INSERT INTO)' "$TMP_SQL"; then
                echo "DB dump looks empty/suspicious"; rm -f "$TMP_SQL"; exit 1
              fi
              rm -f "$TMP_SQL"

              # ---- pick latest content tar (accept *.tar.gz or *.tgz) ----
              CONTENT_FILE=""
              for f in $(ls -1t "$BACKUP_ROOT"/*.tar.gz "$BACKUP_ROOT"/*.tgz 2>/dev/null || true); do
                [ -s "$f" ] || continue
                if tar -tzf "$f" >/dev/null 2>&1; then
                  CONTENT_FILE="$f"; break
                fi
              done
              if [ -z "${CONTENT_FILE:-}" ]; then
                echo "no content dumps found"; exit 1
              fi
              echo "checking content: $CONTENT_FILE"

              # verify content tar lists and contains content/ root
              TMP_LIST=$(mktemp)
              tar -tzf "$CONTENT_FILE" > "$TMP_LIST"
              # Accept either:
              #  A) correct new layout with top-level content/
              #  B) older layout created from inside content/ (./themes, ./images, ...)
              if ! busybox grep -Eq '(^|^\./)content/' "$TMP_LIST"; then
                if ! busybox grep -Eq '(^|^\./)(themes|images|data|public|settings)/' "$TMP_LIST"; then
                  echo "content tar missing expected ghost content structure"; rm -f "$TMP_LIST"; exit 1
                fi
              fi
              rm -f "$TMP_LIST"

              echo "[verify] OK"
            volumeMounts:
            - name: ghost-backups
              mountPath: /backups
          volumes:
          - name: ghost-backups
            persistentVolumeClaim:
              claimName: ghost-backups-pvc
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ghost-backup-prune
  labels:
    app: ghost-backup
spec:
  schedule: "55 3 * * *"   # daily 03:55 (after verify)
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: prune
            image: busybox:1.36
            imagePullPolicy: IfNotPresent
            env:
            - name: BACKUP_ROOT
              value: /backups
            - name: RETAIN_DAYS
              value: "14"
            command: ["sh","-c"]
            args:
            - |
              set -euo pipefail
              echo "[prune] deleting files older than ${RETAIN_DAYS} days in ${BACKUP_ROOT}"
              find "$BACKUP_ROOT" -type f -mtime +${RETAIN_DAYS} -print -delete
              echo "[prune] done"
            volumeMounts:
            - name: ghost-backups
              mountPath: /backups
          volumes:
          - name: ghost-backups
            persistentVolumeClaim:
              claimName: ghost-backups-pvc